// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: pkg/types/cni.proto

package cni

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CNI_AddAttachment_FullMethodName    = "/cni.CNI/AddAttachment"
	CNI_DeleteAttachment_FullMethodName = "/cni.CNI/DeleteAttachment"
	CNI_RegisterNetwork_FullMethodName  = "/cni.CNI/RegisterNetwork"
)

// CNIClient is the client API for CNI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CNIClient interface {
	// MVP
	AddAttachment(ctx context.Context, in *AddAttachmentRequest, opts ...grpc.CallOption) (*AddAttachmentResponse, error)
	// MVP
	DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*DeleteAttachmentResponse, error)
	RegisterNetwork(ctx context.Context, in *NetworkRegistrationRequest, opts ...grpc.CallOption) (*NetworkRegistrationResponse, error)
}

type cNIClient struct {
	cc grpc.ClientConnInterface
}

func NewCNIClient(cc grpc.ClientConnInterface) CNIClient {
	return &cNIClient{cc}
}

func (c *cNIClient) AddAttachment(ctx context.Context, in *AddAttachmentRequest, opts ...grpc.CallOption) (*AddAttachmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAttachmentResponse)
	err := c.cc.Invoke(ctx, CNI_AddAttachment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*DeleteAttachmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAttachmentResponse)
	err := c.cc.Invoke(ctx, CNI_DeleteAttachment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) RegisterNetwork(ctx context.Context, in *NetworkRegistrationRequest, opts ...grpc.CallOption) (*NetworkRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkRegistrationResponse)
	err := c.cc.Invoke(ctx, CNI_RegisterNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CNIServer is the server API for CNI service.
// All implementations should embed UnimplementedCNIServer
// for forward compatibility.
type CNIServer interface {
	// MVP
	AddAttachment(context.Context, *AddAttachmentRequest) (*AddAttachmentResponse, error)
	// MVP
	DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*DeleteAttachmentResponse, error)
	RegisterNetwork(context.Context, *NetworkRegistrationRequest) (*NetworkRegistrationResponse, error)
}

// UnimplementedCNIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCNIServer struct{}

func (UnimplementedCNIServer) AddAttachment(context.Context, *AddAttachmentRequest) (*AddAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttachment not implemented")
}
func (UnimplementedCNIServer) DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*DeleteAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}
func (UnimplementedCNIServer) RegisterNetwork(context.Context, *NetworkRegistrationRequest) (*NetworkRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNetwork not implemented")
}
func (UnimplementedCNIServer) testEmbeddedByValue() {}

// UnsafeCNIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CNIServer will
// result in compilation errors.
type UnsafeCNIServer interface {
	mustEmbedUnimplementedCNIServer()
}

func RegisterCNIServer(s grpc.ServiceRegistrar, srv CNIServer) {
	// If the following call pancis, it indicates UnimplementedCNIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CNI_ServiceDesc, srv)
}

func _CNI_AddAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).AddAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CNI_AddAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).AddAttachment(ctx, req.(*AddAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CNI_DeleteAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).DeleteAttachment(ctx, req.(*DeleteAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_RegisterNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).RegisterNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CNI_RegisterNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).RegisterNetwork(ctx, req.(*NetworkRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CNI_ServiceDesc is the grpc.ServiceDesc for CNI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CNI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cni.CNI",
	HandlerType: (*CNIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAttachment",
			Handler:    _CNI_AddAttachment_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _CNI_DeleteAttachment_Handler,
		},
		{
			MethodName: "RegisterNetwork",
			Handler:    _CNI_RegisterNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/types/cni.proto",
}
